// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "AdSieve Dev Team",
            "url": "http://adsieve.example.com",
            "email": "support@adsieve.com"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/ads": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Возвращает объявления текущего пользователя с фильтрами, пагинацией и сортировкой.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Ads"
                ],
                "summary": "Список объявлений пользователя",
                "parameters": [
                    {
                        "enum": [
                            "active",
                            "paused",
                            "all"
                        ],
                        "type": "string",
                        "default": "all",
                        "description": "Фильтр по статусу",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "facebook",
                            "google"
                        ],
                        "type": "string",
                        "description": "Платформа",
                        "name": "platform",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Подстрока для поиска по названию",
                        "name": "q",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "collectionFormat": "csv",
                        "description": "Список ad_id (CSV)",
                        "name": "ad_id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Номер страницы (\u003e=1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 50,
                        "description": "Размер страницы (1..200)",
                        "name": "page_size",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "name",
                            "-name",
                            "created_at",
                            "-created_at"
                        ],
                        "type": "string",
                        "default": "name",
                        "description": "Сортировка",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/rest.AdsListResponse"
                        }
                    },
                    "400": {
                        "description": "invalid status | invalid ad_id list",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/auth/refresh": {
            "post": {
                "description": "Принимает refresh_token и выдает новую пару токенов (access + refresh).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Обновление access-токена по refresh-токену",
                "parameters": [
                    {
                        "description": "Тело запроса с refresh_token",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/rest.refreshReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "access_token, refresh_token",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "bad request / валидация входных данных",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "unauthorized (refresh токен недействителен/просрочен)",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/auth/sign-in": {
            "post": {
                "description": "Аутентифицирует по email и паролю. Возвращает access и refresh токены.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Логин пользователя",
                "parameters": [
                    {
                        "description": "Данные входа (email, password)",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/rest.signReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "access_token, refresh_token",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "bad request / валидация входных данных",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "unauthorized (неверные учетные данные)",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/auth/sign-up": {
            "post": {
                "description": "Создаёт нового рекламодателя и сразу возвращает пару токенов (access + refresh).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Регистрация пользователя",
                "parameters": [
                    {
                        "description": "Данные регистрации (email, password)",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/rest.signReq"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "access_token, refresh_token",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "bad request / валидация входных данных",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "409": {
                        "description": "email_already_registered",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/click": {
            "post": {
                "description": "Публичный эндпоинт. Принимает событие клика по объявлению и сохраняет в БД.\nПоля: click_id (уникально), ad_id (ID объявления), clicked_at (UNIX UTC).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tracking"
                ],
                "summary": "Регистрация клика",
                "parameters": [
                    {
                        "description": "Данные клика",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/rest.clickReq"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Пример: {\\\"click_id\\\": 12345}",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "bad request / валидация",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "409": {
                        "description": "click_already_registered",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/conversion": {
            "post": {
                "description": "Публичный эндпоинт. Принимает конверсию, связанную с ранее зарегистрированным кликом (по click_id).\nПоля:\n- click_id (required) — ID клика, который уже существует в БД\n- revenue  (required, \u003e0) — сумма заказа/ценность конверсии\n- order_id (optional) — ID заказа в магазине (для дедупликации)\n- converted_at (optional) — UNIX-таймстамп, когда произошла конверсия",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tracking"
                ],
                "summary": "Регистрация конверсии (заказа)",
                "parameters": [
                    {
                        "description": "Данные конверсии",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/rest.conversionRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Пример: {\\\"conversion_id\\\": 12345}",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "bad request / валидация входных данных",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "click_no_found — клик по такому click_id не найден",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "409": {
                        "description": "conversion_already_registered — конверсия с таким order_id уже учтена",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/metrics": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Возвращает суточные метрики (clicks, conversions, revenue, spend, CPA, ROAS) только для объявлений текущего пользователя. Можно фильтровать по диапазону дат и по ad_id.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Analytics"
                ],
                "summary": "Получение агрегированных метрик по объявлениям",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Дата начала (включительно), формат YYYY-MM-DD",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Дата окончания (включительно), формат YYYY-MM-DD",
                        "name": "to",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Список ad_id для фильтрации (через запятую), напр. ad_id=123,456",
                        "name": "ad_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Список дневных метрик; поля: ad_id,date,clicks,conversions,revenue,spend,CPA,ROAS,name,status",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object"
                            }
                        }
                    },
                    "400": {
                        "description": "invalid_date_range | bad_ad_id",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "ad_not_found (нет доступа к указанному ad_id)",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "entity.AdDTO": {
            "type": "object",
            "properties": {
                "ad_id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "platform": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "rest.AdsListMeta": {
            "type": "object",
            "properties": {
                "has_more": {
                    "type": "boolean"
                },
                "page": {
                    "type": "integer"
                },
                "page_size": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "rest.AdsListResponse": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.AdDTO"
                    }
                },
                "meta": {
                    "$ref": "#/definitions/rest.AdsListMeta"
                }
            }
        },
        "rest.clickReq": {
            "type": "object",
            "required": [
                "ad_id",
                "click_id",
                "clicked_at"
            ],
            "properties": {
                "ad_id": {
                    "type": "integer"
                },
                "click_id": {
                    "type": "string"
                },
                "clicked_at": {
                    "type": "integer"
                }
            }
        },
        "rest.conversionRequest": {
            "type": "object",
            "required": [
                "click_id",
                "revenue"
            ],
            "properties": {
                "click_id": {
                    "description": "ID клика",
                    "type": "string"
                },
                "converted_at": {
                    "description": "Время совершения заказа",
                    "type": "integer"
                },
                "order_id": {
                    "description": "ID заказа в системе магазина",
                    "type": "string"
                },
                "revenue": {
                    "description": "Прибыль",
                    "type": "number"
                }
            }
        },
        "rest.refreshReq": {
            "type": "object",
            "required": [
                "refresh_token"
            ],
            "properties": {
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "rest.signReq": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api",
	Schemes:          []string{},
	Title:            "AdSieve API",
	Description:      "Backend система AdSieve (MVP). API для трекинга кликов, конверсий и аналитики.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
